"""
This script loads teams from MongoDB and schedules a full tweetball season
with them
"""

import random
from pymongo import MongoClient
from config import MONGO_URI
from collections import deque
from datetime import datetime, timedelta, time

client = MongoClient(MONGO_URI)
gamesColl = client.tweetball.games
teamColl = client.tweetball.teams

class RoundRobin(object):

	# RoundRobin implements Round Robin style tournaments for a given set of teams, passed to init as a sequence

	def __init__(self, teams):

		self.teams = teams
		# If the list of teams are uneven, append a bye match
		
		if len(teams) % 2 == 1:
			self.teams.append('BYE')
		
		self.mid = int(len(self.teams)/2)
		self.matches = []
		
	def makeRound(self, hubHome = False):
	
		# Adds one round of matches, as tuples, to the match list
		# hubHome is boolean, if True, hub match home/away is flipped
	
		left = self.teams[:self.mid]
		right = list(reversed(self.teams[self.mid:]))
		round = []
		
		for i in range(0, self.mid):
			
			round.append((left[i], right[i]))
		
		if hubHome:
			round[0] = round[0][::-1]
		
		self.matches.append(round)
		
		return True	
			
	def rotate(self):
	
		# Rotate the "wheel" clockwise, keeping the hub (index 0) in place
		
		wheel = deque(self.teams[1:])
		wheel.rotate(1)
		self.teams = [self.teams[0]] + list(wheel)
		
		return True
		
	def makeAllRounds(self):
	
		# Appends a complete set of round robin matches
		
		for i in range(0, len(self.teams)-1):
			
			if i % 2 == 0:
				self.makeRound()
				self.rotate()
			
			else:
				self.makeRound(hubHome=True)
				self.rotate()
				
		return True
		
class Scheduler(object):

	# Scheduler takes a list of lists of tuples that represent series 
	# (e.g. as generated by the RoundRobin class)
	# and schedules a season, adding games to the MongoDB games collection
	
	def __init__(self, rounds, startDate = datetime.utcnow() + timedelta(days = 5)):
	
		#startDate defaults to 5 days after initialization of Scheduler object
		
		self.seasonStart = startDate
		self.lastDay = None
		self.rounds = rounds
		
	def scheduleGame(self, away, home, gameStart):
	
		# gameStart is a datetime object
		
		newGame = {
					'away': away,
					'home': home,
					'start' : gameStart
					}
		
		gamesColl.insert(newGame)
		
	def scheduleSeries(self, away, home, seriesStart):
	
		# seriesStart is a datetime object
		
		homeLong = int(teamColl.find_one({'_id' : home})['long'])
		
		if homeLong >= 105:
			dayStart = time(16,5)
			nightStart = time(22,5)
		
		elif 105 > homeLong >= 85:
			dayStart = time(14,5)
			nightStart = time(20,5)
			
		elif homeLong < 85:
			dayStart = time(13,5)
			nightStart = time(19,5)
		
		dayGame = random.choice([0,1,2])
		
		for g in range(0,3):
			
			day = seriesStart + timedelta(days=g)
			
			if g == dayGame:
				self.scheduleGame(away, home, datetime.combine(day, dayStart))
				
			else:
				self.scheduleGame(away, home, datetime.combine(day, nightStart))
		
def main():
	
	client = MongoClient(MONGO_URI)
	

	teams = list(teamColl.find())

	leagues = [list(teamColl.find({'league' : 'North'})), list(teamColl.find({'league' : 'South'}))]

	divisions = [list(teamColl.find({'league' : 'South', 'division' : 'East'})), list(teamColl.find({'league' : 'South', 'division' : 'West'})), 
		list(teamColl.find({'league' : 'North', 'division' : 'East'})), list(teamColl.find({'league' : 'North', 'division' : 'West'}))]
		
if __name__ == '__main__':
	main()